"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv()
NPM_BIN_PATH = r"C:\Program Files\nodejs\npm.cmd"
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',')

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Redirige todas las peticiones HTTP a HTTPS.
SECURE_SSL_REDIRECT = True

# Asegura que las cookies de sesión solo se envíen por HTTPS.
SESSION_COOKIE_SECURE = True

# Asegura que la cookie CSRF solo se envíe por HTTPS.
CSRF_COOKIE_SECURE = True

# Application definition

INSTALLED_APPS = [
    'tailwind',
    'theme',
    'finanzas',
    'allauth',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'django.contrib.sites', # Requerido por allauth
    'allauth.account',
    'allauth.socialaccount',
    # Proveedor específico de Google
    'allauth.socialaccount.providers.google',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django_session_timeout.middleware.SessionTimeoutMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv("DB_NAME"),
        'USER': os.getenv("DB_USER"),
        'PASSWORD': os.getenv("DB_PASSWORD"),
        'HOST': os.getenv("DB_HOST"),
        'PORT': os.getenv("DB_PORT"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# La URL para acceder a los archivos estáticos en el navegador

# El directorio donde `collectstatic` reunirá todos los archivos
# para la producción. No necesita estar en .env.
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Los directorios donde Django buscará tus archivos estáticos
# (CSS, JS, imágenes de tu proyecto)
STATICFILES_DIRS = [
    BASE_DIR / "theme" / "static",
]

# Configuración de almacenamiento para WhiteNoise (optimiza el caché).
STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- Configuraciones de Redirección de Login/Logout ---
# Después de un login exitoso, enviar al usuario a la URL con el nombre 'dashboard'.
LOGIN_REDIRECT_URL = 'dashboard'

TAILWIND_APP_NAME = 'theme'
INTERNAL_IPS = [
    "127.0.0.1",
]

# Después de cerrar sesión, enviar al usuario a la URL con el nombre 'home'.
LOGOUT_REDIRECT_URL = 'home'

# config/settings.py

# --- CELERY SETTINGS ---
CELERY_BROKER_URL = 'redis://redis:6379/0'
CELERY_RESULT_BACKEND = 'redis://redis:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# Basic logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}

SITE_ID = 1
# Allauth Settings
ACCOUNT_EMAIL_VERIFICATION = 'optional' # Puedes cambiarlo a 'mandatory' si quieres verificación de email
LOGIN_REDIRECT_URL = '/dashboard/' # Ya lo tenías, pero asegúrate de que esté
ACCOUNT_LOGOUT_ON_GET = True # Permite el logout con GET para simplificar

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
            'https://www.googleapis.com/auth/drive.readonly', # Permiso para LEER archivos de Drive
        ],
        'AUTH_PARAMS': {
            'access_type': 'offline', # crucial para obtener un refresh_token y acceder cuando el usuario no está
            'include_granted_scopes': 'true'
        }
    }
}

SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_STORE_TOKENS = True
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
CSRF_TRUSTED_ORIGINS = os.getenv("CSRF_TRUSTED_ORIGINS", '').split(',')
# tu_proyecto/settings.py

# ... (al final del archivo)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'debug.log', # El archivo se creará en la raíz de tu proyecto
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        # Este es el logger para tu app 'finanzas'. ¡Puedes cambiar el nombre!
        'finanzas': {
            'handlers': ['console', 'file'], # Envía los logs a la consola y al archivo
            'level': 'DEBUG', # Captura desde el nivel más bajo (DEBUG)
            'propagate': False,
        },
    },
}


# Email configuration
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND')
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS') == 'True'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER


# --- DJANGO SESSION TIMEOUT SETTINGS ---
# Tiempo en segundos que una sesión puede estar inactiva. 
# Después de este tiempo, el usuario tendrá que volver a iniciar sesión.
SESSION_EXPIRE_SECONDS = 1800  # 30 minutos (30 * 60)

# Si es True, la sesión expira después del tiempo definido en SESSION_EXPIRE_SECONDS
# desde la última actividad del usuario. Si es False, expira desde el inicio de sesión.
SESSION_EXPIRE_AFTER_LAST_ACTIVITY = True

# URL a la que se redirige al usuario cuando su sesión expira.
SESSION_TIMEOUT_REDIRECT = 'login' 